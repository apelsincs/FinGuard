"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
"""

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.config import get_settings
from app.utils.logger import get_logger

logger = get_logger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = get_settings()

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(
    settings.database_url,
    echo=settings.debug,  # –í—ã–≤–æ–¥–∏–º SQL –∑–∞–ø—Ä–æ—Å—ã –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    connect_args={"check_same_thread": False} if "sqlite" in settings.database_url else {}
)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


def get_db():
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        raise
    finally:
        db.close()


def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        from app.database.models import User, Transaction, Category, Budget, PaymentMethod
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def check_db_connection():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        from sqlalchemy import text
        with engine.connect() as connection:
            connection.execute(text("SELECT 1"))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def create_sample_data():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    from app.database.models import User, Category, TransactionType
    from sqlalchemy.orm import Session
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if db.query(User).first():
            logger.info("–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        demo_user = User(
            telegram_id=123456789,
            username="demo_user",
            first_name="–î–µ–º–æ",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        db.add(demo_user)
        db.commit()
        db.refresh(demo_user)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        expense_categories = [
            ("üçî –ï–¥–∞", "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "#FF6B6B"),
            ("üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–¢–∞–∫—Å–∏, –º–µ—Ç—Ä–æ, –±–µ–Ω–∑–∏–Ω", "#4ECDC4"),
            ("üè† –ñ–∏–ª—å–µ", "–ê—Ä–µ–Ω–¥–∞, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "#45B7D1"),
            ("üõçÔ∏è –ü–æ–∫—É–ø–∫–∏", "–û–¥–µ–∂–¥–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "#96CEB4"),
            ("üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ö–∏–Ω–æ, –∏–≥—Ä—ã, —Ö–æ–±–±–∏", "#FFEAA7"),
            ("üíä –ó–¥–æ—Ä–æ–≤—å–µ", "–ú–µ–¥–∏—Ü–∏–Ω–∞, —Å–ø–æ—Ä—Ç", "#DDA0DD"),
            ("üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ö—É—Ä—Å—ã, –∫–Ω–∏–≥–∏", "#98D8C8"),
            ("üíº –†–∞–±–æ—Ç–∞", "–û—Ñ–∏—Å, –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏", "#F7DC6F")
        ]
        
        for name, description, color in expense_categories:
            category = Category(
                user_id=demo_user.id,
                name=name,
                description=description,
                color=color,
                transaction_type=TransactionType.EXPENSE
            )
            db.add(category)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        income_categories = [
            ("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", "–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥", "#2ECC71"),
            ("üíº –§—Ä–∏–ª–∞–Ω—Å", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥", "#3498DB"),
            ("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–î–æ—Ö–æ–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "#9B59B6"),
            ("üéÅ –ü–æ–¥–∞—Ä–∫–∏", "–ü–æ–¥–∞—Ä–∫–∏ –∏ –±–æ–Ω—É—Å—ã", "#E67E22")
        ]
        
        for name, description, color in income_categories:
            category = Category(
                user_id=demo_user.id,
                name=name,
                description=description,
                color=color,
                transaction_type=TransactionType.INCOME
            )
            db.add(category)
        
        db.commit()
        logger.info("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()
