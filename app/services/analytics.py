"""
–°–µ—Ä–≤–∏—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import func, and_
import statistics
from app.database.models import Transaction, TransactionType, Category
from app.utils.logger import get_logger

logger = get_logger(__name__)


class AnalyticsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def get_expense_forecast(self, user_id: int, days: int = 30) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            
        Returns:
            dict: –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
            end_date = datetime.now()
            start_date = end_date - timedelta(days=90)
            
            expenses = self.db.query(Transaction).filter(
                and_(
                    Transaction.user_id == user_id,
                    Transaction.type == TransactionType.EXPENSE,
                    Transaction.transaction_date >= start_date,
                    Transaction.transaction_date <= end_date
                )
            ).all()
            
            if not expenses:
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞'
                }
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_expenses = {}
            for expense in expenses:
                date_key = expense.transaction_date.date()
                if date_key not in daily_expenses:
                    daily_expenses[date_key] = []
                daily_expenses[date_key].append(expense.amount)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            daily_totals = [sum(amounts) for amounts in daily_expenses.values()]
            
            if not daily_totals:
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞'
                }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            avg_daily = statistics.mean(daily_totals)
            median_daily = statistics.median(daily_totals)
            std_daily = statistics.stdev(daily_totals) if len(daily_totals) > 1 else 0
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            forecast_total = avg_daily * days
            forecast_min = (avg_daily - std_daily) * days
            forecast_max = (avg_daily + std_daily) * days
            
            return {
                'success': True,
                'forecast_days': days,
                'average_daily': avg_daily,
                'median_daily': median_daily,
                'forecast_total': forecast_total,
                'forecast_min': forecast_min,
                'forecast_max': forecast_max,
                'confidence_interval': f"{forecast_min:,.0f} - {forecast_max:,.0f} ‚ÇΩ"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}'
            }
    
    def get_spending_trends(self, user_id: int, days: int = 30) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            dict: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        try:
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_data = {}
            for i in range(days // 7 + 1):
                week_start = start_date + timedelta(days=i * 7)
                week_end = min(week_start + timedelta(days=7), end_date)
                
                expenses = self.db.query(func.sum(Transaction.amount)).filter(
                    and_(
                        Transaction.user_id == user_id,
                        Transaction.type == TransactionType.EXPENSE,
                        Transaction.transaction_date >= week_start,
                        Transaction.transaction_date < week_end
                    )
                ).scalar() or 0
                
                weekly_data[f"–ù–µ–¥–µ–ª—è {i+1}"] = expenses
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
            values = list(weekly_data.values())
            if len(values) < 2:
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞'
                }
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            first_half = values[:len(values)//2]
            second_half = values[len(values)//2:]
            
            avg_first = statistics.mean(first_half) if first_half else 0
            avg_second = statistics.mean(second_half) if second_half else 0
            
            trend_direction = "üìà –†–∞—Å—Ç—É—Ç" if avg_second > avg_first else "üìâ –°–Ω–∏–∂–∞—é—Ç—Å—è" if avg_second < avg_first else "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã"
            trend_percentage = ((avg_second - avg_first) / avg_first * 100) if avg_first > 0 else 0
            
            return {
                'success': True,
                'weekly_data': weekly_data,
                'trend_direction': trend_direction,
                'trend_percentage': trend_percentage,
                'average_weekly': statistics.mean(values),
                'total_period': sum(values)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}'
            }
    
    def get_savings_recommendations(self, user_id: int) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            end_date = datetime.now()
            start_date = end_date - timedelta(days=30)
            
            expenses = self.db.query(Transaction).filter(
                and_(
                    Transaction.user_id == user_id,
                    Transaction.type == TransactionType.EXPENSE,
                    Transaction.transaction_date >= start_date,
                    Transaction.transaction_date <= end_date
                )
            ).all()
            
            if not expenses:
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_expenses = {}
            for expense in expenses:
                category_name = expense.category.name if expense.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                if category_name not in category_expenses:
                    category_expenses[category_name] = []
                category_expenses[category_name].append(expense.amount)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_totals = {cat: sum(amounts) for cat, amounts in category_expenses.items()}
            sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
            
            total_expenses = sum(category_totals.values())
            recommendations = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            for category, amount in sorted_categories[:3]:  # –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                percentage = (amount / total_expenses * 100) if total_expenses > 0 else 0
                
                if percentage > 30:
                    recommendations.append({
                        'category': category,
                        'amount': amount,
                        'percentage': percentage,
                        'suggestion': f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {category} - —ç—Ç–æ {percentage:.1f}% –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç"
                    })
                elif percentage > 15:
                    recommendations.append({
                        'category': category,
                        'amount': amount,
                        'percentage': percentage,
                        'suggestion': f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ {category}"
                    })
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            avg_daily = total_expenses / 30
            if avg_daily > 5000:
                recommendations.append({
                    'category': '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
                    'amount': total_expenses,
                    'percentage': 100,
                    'suggestion': f"–í–∞—à–∏ —Å—Ä–µ–¥–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã {avg_daily:,.0f} ‚ÇΩ –¥–æ–≤–æ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞."
                })
            
            return {
                'success': True,
                'total_expenses': total_expenses,
                'average_daily': avg_daily,
                'recommendations': recommendations,
                'top_categories': sorted_categories[:5]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}'
            }
    
    def get_financial_health_score(self, user_id: int) -> Dict[str, Any]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –û—Ü–µ–Ω–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            end_date = datetime.now()
            start_date = end_date - timedelta(days=30)
            
            transactions = self.db.query(Transaction).filter(
                and_(
                    Transaction.user_id == user_id,
                    Transaction.transaction_date >= start_date,
                    Transaction.transaction_date <= end_date
                )
            ).all()
            
            if not transactions:
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏'
                }
            
            total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
            total_expenses = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            savings_rate = ((total_income - total_expenses) / total_income * 100) if total_income > 0 else 0
            expense_ratio = (total_expenses / total_income * 100) if total_income > 0 else 100
            
            # –û—Ü–µ–Ω–∫–∞ –ø–æ —à–∫–∞–ª–µ 0-100
            score = 0
            
            # –û—Ü–µ–Ω–∫–∞ –ø–æ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º (40 –±–∞–ª–ª–æ–≤)
            if savings_rate >= 20:
                score += 40
            elif savings_rate >= 10:
                score += 30
            elif savings_rate >= 0:
                score += 20
            else:
                score += 0
            
            # –û—Ü–µ–Ω–∫–∞ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (30 –±–∞–ª–ª–æ–≤)
            if expense_ratio <= 80:
                score += 30
            elif expense_ratio <= 90:
                score += 20
            elif expense_ratio <= 100:
                score += 10
            else:
                score += 0
            
            # –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é –¥–æ—Ö–æ–¥–æ–≤ (20 –±–∞–ª–ª–æ–≤)
            income_categories = set(t.category.name for t in transactions if t.type == TransactionType.INCOME and t.category)
            if len(income_categories) >= 3:
                score += 20
            elif len(income_categories) >= 2:
                score += 15
            elif len(income_categories) >= 1:
                score += 10
            
            # –û—Ü–µ–Ω–∫–∞ –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (10 –±–∞–ª–ª–æ–≤)
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
            if total_income > 0:
                score += 10
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            if score >= 80:
                level = "–û—Ç–ª–∏—á–Ω–æ"
                emoji = "üü¢"
            elif score >= 60:
                level = "–•–æ—Ä–æ—à–æ"
                emoji = "üü°"
            elif score >= 40:
                level = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                emoji = "üü†"
            else:
                level = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
                emoji = "üî¥"
            
            return {
                'success': True,
                'score': score,
                'level': level,
                'emoji': emoji,
                'total_income': total_income,
                'total_expenses': total_expenses,
                'savings_rate': savings_rate,
                'expense_ratio': expense_ratio,
                'income_categories': len(income_categories)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {str(e)}'
            }
    
    def get_comparison_with_previous_period(self, user_id: int, current_days: int = 30) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            dict: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
        """
        try:
            end_date = datetime.now()
            current_start = end_date - timedelta(days=current_days)
            previous_start = current_start - timedelta(days=current_days)
            
            # –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
            current_transactions = self.db.query(Transaction).filter(
                and_(
                    Transaction.user_id == user_id,
                    Transaction.transaction_date >= current_start,
                    Transaction.transaction_date <= end_date
                )
            ).all()
            
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
            previous_transactions = self.db.query(Transaction).filter(
                and_(
                    Transaction.user_id == user_id,
                    Transaction.transaction_date >= previous_start,
                    Transaction.transaction_date < current_start
                )
            ).all()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            current_income = sum(t.amount for t in current_transactions if t.type == TransactionType.INCOME)
            current_expenses = sum(t.amount for t in current_transactions if t.type == TransactionType.EXPENSE)
            
            previous_income = sum(t.amount for t in previous_transactions if t.type == TransactionType.INCOME)
            previous_expenses = sum(t.amount for t in previous_transactions if t.type == TransactionType.EXPENSE)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            income_change = ((current_income - previous_income) / previous_income * 100) if previous_income > 0 else 0
            expense_change = ((current_expenses - previous_expenses) / previous_expenses * 100) if previous_expenses > 0 else 0
            
            return {
                'success': True,
                'current_period': {
                    'income': current_income,
                    'expenses': current_expenses,
                    'balance': current_income - current_expenses
                },
                'previous_period': {
                    'income': previous_income,
                    'expenses': previous_expenses,
                    'balance': previous_income - previous_expenses
                },
                'changes': {
                    'income_change': income_change,
                    'expense_change': expense_change,
                    'income_trend': "üìà" if income_change > 0 else "üìâ" if income_change < 0 else "‚û°Ô∏è",
                    'expense_trend': "üìà" if expense_change > 0 else "üìâ" if expense_change < 0 else "‚û°Ô∏è"
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤: {str(e)}'
            }
