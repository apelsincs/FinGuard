"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
"""

from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import func
from app.database.models import User, Transaction, Budget, TransactionType
from app.utils.logger import get_logger

logger = get_logger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def check_budget_alerts(self, user_id: int) -> list:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ
        """
        notifications = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_budgets = self.db.query(Budget).filter(
            Budget.user_id == user_id,
            Budget.start_date <= datetime.now(),
            Budget.end_date >= datetime.now(),
            Budget.is_active == True
        ).all()
        
        for budget in active_budgets:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ –±—é–¥–∂–µ—Ç–∞
            expenses = self.db.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.type == TransactionType.EXPENSE,
                Transaction.status == "confirmed",
                Transaction.transaction_date >= budget.start_date,
                Transaction.transaction_date <= budget.end_date
            ).scalar() or 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            usage_percentage = expenses / budget.amount if budget.amount > 0 else 0
            
            if usage_percentage >= 1.0:
                notifications.append({
                    'type': 'budget_exceeded',
                    'title': 'üö® –ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç!',
                    'message': f"–ë—é–¥–∂–µ—Ç '{budget.name}' –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {((usage_percentage - 1) * 100):.1f}%",
                    'budget': budget,
                    'expenses': expenses,
                    'usage_percentage': usage_percentage
                })
            elif usage_percentage >= budget.alert_threshold:
                notifications.append({
                    'type': 'budget_warning',
                    'title': '‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É –±—é–¥–∂–µ—Ç–∞',
                    'message': f"–ë—é–¥–∂–µ—Ç '{budget.name}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ {usage_percentage * 100:.1f}%",
                    'budget': budget,
                    'expenses': expenses,
                    'usage_percentage': usage_percentage
                })
        
        return notifications
    
    def check_daily_report(self, user_id: int) -> dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        """
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        yesterday = today - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤—á–µ—Ä–∞
        transactions = self.db.query(Transaction).filter(
            Transaction.user_id == user_id,
            Transaction.status == "confirmed",
            Transaction.transaction_date >= yesterday,
            Transaction.transaction_date < today
        ).all()
        
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        total_expense = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        balance = total_income - total_expense
        
        return {
            'date': yesterday.strftime('%d.%m.%Y'),
            'transactions_count': len(transactions),
            'total_income': total_income,
            'total_expense': total_expense,
            'balance': balance,
            'transactions': transactions
        }
    
    def check_suspicious_activity(self, user_id: int) -> list:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        yesterday = datetime.now() - timedelta(days=1)
        
        suspicious_transactions = self.db.query(Transaction).filter(
            Transaction.user_id == user_id,
            Transaction.is_suspicious == True,
            Transaction.transaction_date >= yesterday
        ).all()
        
        return suspicious_transactions
    
    def get_user_notifications(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = self.db.query(User).filter(User.id == user_id).first()
        if not user:
            return {}
        
        notifications = {
            'budget_alerts': [],
            'daily_report': None,
            'suspicious_activity': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ
        if user.notifications_enabled:
            notifications['budget_alerts'] = self.check_budget_alerts(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        if user.daily_reports_enabled:
            notifications['daily_report'] = self.check_daily_report(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if user.fraud_alerts_enabled:
            notifications['suspicious_activity'] = self.check_suspicious_activity(user_id)
        
        return notifications
    
    def format_notifications(self, notifications: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        Args:
            notifications: –°–ª–æ–≤–∞—Ä—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if not any(notifications.values()):
            return "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        
        response = "üì¢ –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ
        if notifications['budget_alerts']:
            response += "üí∞ –ë—é–¥–∂–µ—Ç:\n"
            for alert in notifications['budget_alerts']:
                response += f"‚Ä¢ {alert['title']}\n"
                response += f"  {alert['message']}\n\n"
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        if notifications['daily_report']:
            report = notifications['daily_report']
            if report['transactions_count'] > 0:
                response += f"üìä –û—Ç—á–µ—Ç –∑–∞ {report['date']}:\n"
                response += f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {report['transactions_count']}\n"
                response += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: +{report['total_income']:,.0f} ‚ÇΩ\n"
                response += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: -{report['total_expense']:,.0f} ‚ÇΩ\n"
                response += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {report['balance']:+,.0f} ‚ÇΩ\n\n"
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if notifications['suspicious_activity']:
            response += "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n"
            for transaction in notifications['suspicious_activity']:
                response += f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction.amount} ‚ÇΩ - {transaction.description}\n"
                if transaction.fraud_reasons:
                    response += f"  –ü—Ä–∏—á–∏–Ω—ã: {transaction.fraud_reasons}\n"
            response += "\n"
        
        return response.strip()
