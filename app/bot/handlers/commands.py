"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
"""

from aiogram import types
from aiogram.filters import Command
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import re
import os

from app.database.database import SessionLocal
from app.database.models import User, Transaction, Category, TransactionType, TransactionStatus, Budget, FraudAlert
from app.services.fraud_detection import FraudDetectionService
from app.utils.logger import get_logger

logger = get_logger(__name__)


def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None) -> User:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
        return user
    finally:
        db.close()


async def start_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FinGuard!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
/transactions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
/budget - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–º
/set_budget - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/alerts - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –°–ø—Ä–∞–≤–∫–∞

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
"500 –µ–¥–∞" –∏–ª–∏ "-1000 —Ç–∞–∫—Å–∏"
    """
    
    await message.answer(welcome_text)


async def help_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º FinGuard:

üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥
‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: "500 –µ–¥–∞" –∏–ª–∏ "-1000 —Ç–∞–∫—Å–∏"

üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ /transactions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
‚Ä¢ /budget - –ü—Ä–æ—Å–º–æ—Ç—Ä –±—é–¥–∂–µ—Ç–∞
‚Ä¢ /set_budget - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ /alerts - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ "1500 –∑–∞—Ä–ø–ª–∞—Ç–∞" - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
‚Ä¢ "-500 –ø—Ä–æ–¥—É–∫—Ç—ã" - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
‚Ä¢ "-2000 –∞—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã" - –∫—Ä—É–ø–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
‚Ä¢ /set_budget 50000 –º–µ—Å—è—Ü - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç
‚Ä¢ /settings notifications off - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    
    await message.answer(help_text)


async def add_transaction(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    user = message.from_user
    text = message.text.strip()
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not text or len(text) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n–ü—Ä–∏–º–µ—Ä: '500 –µ–¥–∞' –∏–ª–∏ '-1000 —Ç–∞–∫—Å–∏'")
        return
    
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    try:
        # –§–æ—Ä–º–∞—Ç: "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ #–∫–∞—Ç–µ–≥–æ—Ä–∏—è" –∏–ª–∏ "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ"
        if '#' in text:
            # –ï—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            parts = text.split('#', 1)
            main_part = parts[0].strip()
            category_name = parts[1].strip()
            
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å
            match = re.match(r'^(-?\d+(?:\.\d+)?)\s+(.+)$', main_part)
            if not match:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ #–∫–∞—Ç–µ–≥–æ—Ä–∏—è'\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ 500 –µ–¥–∞ #–ø—Ä–æ–¥—É–∫—Ç—ã\n"
                    "‚Ä¢ -1000 —Ç–∞–∫—Å–∏ #—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n"
                    "‚Ä¢ 1500.50 –∑–∞—Ä–ø–ª–∞—Ç–∞ #–¥–æ—Ö–æ–¥—ã"
                )
                return
            
            amount = float(match.group(1))
            description = match.group(2).strip()
        else:
            # –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            match = re.match(r'^(-?\d+(?:\.\d+)?)\s+(.+)$', text)
            if not match:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ' –∏–ª–∏ '—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ #–∫–∞—Ç–µ–≥–æ—Ä–∏—è'\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ 500 –µ–¥–∞\n"
                    "‚Ä¢ -1000 —Ç–∞–∫—Å–∏ #—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n"
                    "‚Ä¢ 1500.50 –∑–∞—Ä–ø–ª–∞—Ç–∞ #–¥–æ—Ö–æ–¥—ã"
                )
                return
            
            amount = float(match.group(1))
            description = match.group(2).strip()
            category_name = None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        if amount == 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –Ω—É–ª—é")
            return
        
        if abs(amount) > 1000000000:  # 1 –º–∏–ª–ª–∏–∞—Ä–¥
            await message.answer("‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 200:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        if not description:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            return
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ -1000")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_type = TransactionType.INCOME if amount > 0 else TransactionType.EXPENSE
    abs_amount = abs(amount)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        category_id = None
        if category_name:
            category = db.query(Category).filter(
                Category.user_id == db_user.id,
                Category.name == category_name,
                Category.transaction_type == transaction_type,
                Category.is_active == True
            ).first()
            
            if category:
                category_id = category.id
            else:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë
                await message.answer(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=db_user.id,
            category_id=category_id,
            amount=abs_amount,
            currency="RUB",
            description=description,
            type=transaction_type,
            status=TransactionStatus.CONFIRMED,
            transaction_date=datetime.now()
        )
        
        db.add(transaction)
        db.commit()
        db.refresh(transaction)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        fraud_service = FraudDetectionService(db)
        analysis = fraud_service.analyze_transaction(transaction)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        transaction.is_suspicious = analysis['is_suspicious']
        transaction.fraud_score = analysis['fraud_score']
        transaction.fraud_reasons = ', '.join(analysis['reasons']) if analysis['reasons'] else None
        
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        emoji = "üí∞" if transaction_type == TransactionType.INCOME else "üí∏"
        type_text = "–¥–æ—Ö–æ–¥" if transaction_type == TransactionType.INCOME else "—Ä–∞—Å—Ö–æ–¥"
        
        response = f"{emoji} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        response += f"üí∞ –°—É–º–º–∞: {abs_amount} ‚ÇΩ\n"
        response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        response += f"üìä –¢–∏–ø: {type_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id:
            category = db.query(Category).filter(Category.id == category_id).first()
            if category:
                response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.icon or 'üìä'} {category.name}\n"
        
        response += f"‚úÖ –°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if analysis['is_suspicious']:
            response += f"\n\n‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n"
            response += f"–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {int(analysis['fraud_score'] * 100)}%\n"
            response += f"–ü—Ä–∏—á–∏–Ω—ã: {', '.join(analysis['reasons'])}"
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ
            if db_user.fraud_alerts_enabled:
                fraud_service.create_fraud_alert(transaction, analysis)
        
        await message.answer(response)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {abs_amount} ‚ÇΩ - {description}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        db.rollback()
    finally:
        db.close()


async def view_transactions(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = db.query(Transaction).filter(
            Transaction.user_id == db_user.id
        ).order_by(Transaction.created_at.desc()).limit(10).all()
        
        if not transactions:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        response = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
        total_income = 0
        total_expense = 0
        
        for i, transaction in enumerate(transactions, 1):
            emoji = "üí∏" if transaction.type == TransactionType.EXPENSE else "üí∞"
            sign = "-" if transaction.type == TransactionType.EXPENSE else "+"
            
            if transaction.type == TransactionType.EXPENSE:
                total_expense += transaction.amount
            else:
                total_income += transaction.amount
            
            response += f"{i}. {emoji} {sign}{transaction.amount} ‚ÇΩ - {transaction.description}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if transaction.category_id:
                category = db.query(Category).filter(Category.id == transaction.category_id).first()
                if category:
                    response += f"   üìÇ {category.icon or 'üìä'} {category.name}\n"
            
            response += f"   üìÖ {transaction.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
        balance = total_income - total_expense
        response += f"üìà –ò—Ç–æ–≥–æ:\n"
        response += f"üí∞ –î–æ—Ö–æ–¥—ã: +{total_income} ‚ÇΩ\n"
        response += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: -{total_expense} ‚ÇΩ\n"
        response += f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance:+.0f} ‚ÇΩ"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    finally:
        db.close()


async def set_budget(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞"""
    user = message.from_user
    text = message.text
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /set_budget —Å—É–º–º–∞ –ø–µ—Ä–∏–æ–¥
    # –ü—Ä–∏–º–µ—Ä—ã: /set_budget 50000 –º–µ—Å—è—Ü, /set_budget 10000 –Ω–µ–¥–µ–ª—è
    parts = text.split()
    
    if len(parts) < 3:
        await message.answer(
            "üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_budget —Å—É–º–º–∞ –ø–µ—Ä–∏–æ–¥\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /set_budget 50000 –º–µ—Å—è—Ü\n"
            "‚Ä¢ /set_budget 10000 –Ω–µ–¥–µ–ª—è\n"
            "‚Ä¢ /set_budget 2000 –¥–µ–Ω—å"
        )
        return
    
    try:
        amount = float(parts[1])
        period = parts[2].lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if period in ['–¥–µ–Ω—å', 'day']:
            start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = start_date + timedelta(days=1)
            period_name = "–¥–µ–Ω—å"
        elif period in ['–Ω–µ–¥–µ–ª—è', 'week']:
            start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = start_date + timedelta(weeks=1)
            period_name = "–Ω–µ–¥–µ–ª—è"
        elif period in ['–º–µ—Å—è—Ü', 'month']:
            start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = start_date + timedelta(days=30)
            period_name = "–º–µ—Å—è—Ü"
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç
        db = SessionLocal()
        try:
            budget = Budget(
                user_id=db_user.id,
                name=f"–ë—é–¥–∂–µ—Ç –Ω–∞ {period_name}",
                amount=amount,
                currency="RUB",
                start_date=start_date,
                end_date=end_date,
                alert_threshold=0.8  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            )
            db.add(budget)
            db.commit()
            
            response = f"""
üìä –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ
üìÖ –ü–µ—Ä–∏–æ–¥: {period_name}
üìÖ –°: {start_date.strftime('%d.%m.%Y')}
üìÖ –ü–æ: {end_date.strftime('%d.%m.%Y')}
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–∏ {int(budget.alert_threshold * 100)}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            """
            
            await message.answer(response)
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—é–¥–∂–µ—Ç: {amount} ‚ÇΩ –Ω–∞ {period_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞")
        finally:
            db.close()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")


async def view_budget(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—é–¥–∂–µ—Ç–∞"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã
        current_date = datetime.now()
        budgets = db.query(Budget).filter(
            Budget.user_id == db_user.id,
            Budget.is_active == True,
            Budget.start_date <= current_date,
            Budget.end_date >= current_date
        ).all()
        
        if not budgets:
            await message.answer(
                "üìä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤.\n\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/set_budget —Å—É–º–º–∞ –ø–µ—Ä–∏–æ–¥\n"
                "–ü—Ä–∏–º–µ—Ä: /set_budget 50000 –º–µ—Å—è—Ü"
            )
            return
        
        response = "üìä –í–∞—à–∏ –±—é–¥–∂–µ—Ç—ã:\n\n"
        
        for i, budget in enumerate(budgets, 1):
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –∑–∞ –ø–µ—Ä–∏–æ–¥ –±—é–¥–∂–µ—Ç–∞
            spent = db.query(Transaction).filter(
                Transaction.user_id == db_user.id,
                Transaction.type == TransactionType.EXPENSE,
                Transaction.transaction_date >= budget.start_date,
                Transaction.transaction_date <= budget.end_date
            ).with_entities(db.func.sum(Transaction.amount)).scalar() or 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage_percent = (spent / budget.amount) * 100 if budget.amount > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if usage_percent >= 100:
                status = "üî¥ –ü—Ä–µ–≤—ã—à–µ–Ω"
                emoji = "üî¥"
            elif usage_percent >= budget.alert_threshold * 100:
                status = "üü° –í–Ω–∏–º–∞–Ω–∏–µ"
                emoji = "üü°"
            else:
                status = "üü¢ –í –Ω–æ—Ä–º–µ"
                emoji = "üü¢"
            
            response += f"{i}. {emoji} {budget.name}\n"
            response += f"   üí∞ –ë—é–¥–∂–µ—Ç: {budget.amount} ‚ÇΩ\n"
            response += f"   üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.0f} ‚ÇΩ ({usage_percent:.1f}%)\n"
            response += f"   üí≥ –û—Å—Ç–∞–ª–æ—Å—å: {budget.amount - spent:.0f} ‚ÇΩ\n"
            response += f"   üìÖ {budget.start_date.strftime('%d.%m')} - {budget.end_date.strftime('%d.%m')}\n"
            response += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞")
    finally:
        db.close()


async def fraud_alerts(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        fraud_service = FraudDetectionService(db)
        alerts = fraud_service.get_user_alerts(db_user.id, unread_only=True)
        
        if not alerts:
            await message.answer(
                "üîí –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ "
                "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
            )
            return
        
        response = "üîí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n\n"
        
        for i, alert in enumerate(alerts, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É—Ä–æ–≤–Ω—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            if alert.severity == "HIGH":
                emoji = "üî¥"
            elif alert.severity == "MEDIUM":
                emoji = "üü°"
            else:
                emoji = "üü¢"
            
            response += f"{i}. {emoji} {alert.message}\n"
            response += f"   üìÖ {alert.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            response += f"   ‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å: {alert.severity}\n\n"
        
        response += f"üìä –í—Å–µ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(alerts)}"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    finally:
        db.close()


async def statistics_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now() - timedelta(days=30)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_transactions = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.created_at >= thirty_days_ago
        ).count()
        
        # –î–æ—Ö–æ–¥—ã
        total_income = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.type == TransactionType.INCOME,
            Transaction.created_at >= thirty_days_ago
        ).with_entities(db.func.sum(Transaction.amount)).scalar() or 0
        
        # –†–∞—Å—Ö–æ–¥—ã
        total_expense = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.type == TransactionType.EXPENSE,
            Transaction.created_at >= thirty_days_ago
        ).with_entities(db.func.sum(Transaction.amount)).scalar() or 0
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        suspicious_count = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.is_suspicious == True,
            Transaction.created_at >= thirty_days_ago
        ).count()
        
        # –°—Ä–µ–¥–Ω–∏–µ —Å—É–º–º—ã
        avg_income = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.type == TransactionType.INCOME,
            Transaction.created_at >= thirty_days_ago
        ).with_entities(db.func.avg(Transaction.amount)).scalar() or 0
        
        avg_expense = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.type == TransactionType.EXPENSE,
            Transaction.created_at >= thirty_days_ago
        ).with_entities(db.func.avg(Transaction.amount)).scalar() or 0
        
        # –ë–∞–ª–∞–Ω—Å
        balance = total_income - total_expense
        
        response = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

üí∞ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}
‚Ä¢ –î–æ—Ö–æ–¥—ã: +{total_income:.0f} ‚ÇΩ
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: -{total_expense:.0f} ‚ÇΩ
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {balance:+.0f} ‚ÇΩ

üìà –°—Ä–µ–¥–Ω–∏–µ —Å—É–º–º—ã:
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: {avg_income:.0f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: {avg_expense:.0f} ‚ÇΩ

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {suspicious_count}
        """
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        db.close()


async def settings_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = message.from_user
    text = message.text
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /settings –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ
    parts = text.split()
    
    if len(parts) < 2:
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FinGuard\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /settings notifications on/off - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ /settings reports on/off - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
            "‚Ä¢ /settings alerts on/off - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ /settings 2fa on/off - –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /settings notifications off\n"
            "‚Ä¢ /settings reports on"
        )
        return
    
    setting = parts[1].lower()
    value = parts[2].lower() if len(parts) > 2 else None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if setting == "notifications":
            if value == "on":
                db_user.notifications_enabled = True
                response = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
            elif value == "off":
                db_user.notifications_enabled = False
                response = "üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            else:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on –∏–ª–∏ off")
                return
                
        elif setting == "reports":
            if value == "on":
                db_user.daily_reports_enabled = True
                response = "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã"
            elif value == "off":
                db_user.daily_reports_enabled = False
                response = "üîá –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            else:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on –∏–ª–∏ off")
                return
                
        elif setting == "alerts":
            if value == "on":
                db_user.fraud_alerts_enabled = True
                response = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω—ã"
            elif value == "off":
                db_user.fraud_alerts_enabled = False
                response = "üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            else:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on –∏–ª–∏ off")
                return
                
        elif setting == "2fa":
            if value == "on":
                db_user.two_factor_enabled = True
                response = "‚úÖ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞"
            elif value == "off":
                db_user.two_factor_enabled = False
                response = "üîá –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
            else:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on –∏–ª–∏ off")
                return
                
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            return
        
        db.commit()
        await message.answer(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É {setting}: {value}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    finally:
        db.close()


async def delete_transaction_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    user = message.from_user
    text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /delete ID
    parts = text.split()
    if len(parts) != 2:
        await message.answer(
            "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete ID\n"
            "–ü—Ä–∏–º–µ—Ä: /delete 123\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /transactions"
        )
        return
    
    try:
        transaction_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = db.query(Transaction).filter(
            Transaction.id == transaction_id,
            Transaction.user_id == db_user.id
        ).first()
        
        if not transaction:
            await message.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–∞
        amount = transaction.amount
        description = transaction.description
        transaction_type = transaction.type
        
        # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.delete(transaction)
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        emoji = "üí∞" if transaction_type == TransactionType.INCOME else "üí∏"
        type_text = "–¥–æ—Ö–æ–¥" if transaction_type == TransactionType.INCOME else "—Ä–∞—Å—Ö–æ–¥"
        
        response = f"üóëÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!\n"
        response += f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
        response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        response += f"üìä –¢–∏–ø: {type_text}\n"
        response += f"üÜî ID: {transaction_id}"
        
        await message.answer(response)
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id}: {amount} ‚ÇΩ - {description}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        db.rollback()
    finally:
        db.close()


async def balance_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±–∞–ª–∞–Ω—Å–∞"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        transactions = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.status == TransactionStatus.CONFIRMED
        ).all()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        total_income = sum(t.amount for t in transactions if t.type == TransactionType.INCOME)
        total_expense = sum(t.amount for t in transactions if t.type == TransactionType.EXPENSE)
        balance = total_income - total_expense
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now() - timedelta(days=30)
        recent_transactions = db.query(Transaction).filter(
            Transaction.user_id == db_user.id,
            Transaction.status == TransactionStatus.CONFIRMED,
            Transaction.transaction_date >= thirty_days_ago
        ).all()
        
        recent_income = sum(t.amount for t in recent_transactions if t.type == TransactionType.INCOME)
        recent_expense = sum(t.amount for t in recent_transactions if t.type == TransactionType.EXPENSE)
        recent_balance = recent_income - recent_expense
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üí≥ –ë–∞–ª–∞–Ω—Å FinGuard\n\n"
        response += f"üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
        response += f"üí∞ –î–æ—Ö–æ–¥—ã: +{total_income:,.0f} ‚ÇΩ\n"
        response += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: -{total_expense:,.0f} ‚ÇΩ\n"
        response += f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance:+,.0f} ‚ÇΩ\n\n"
        response += f"üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n"
        response += f"üí∞ –î–æ—Ö–æ–¥—ã: +{recent_income:,.0f} ‚ÇΩ\n"
        response += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: -{recent_expense:,.0f} ‚ÇΩ\n"
        response += f"üí≥ –ë–∞–ª–∞–Ω—Å: {recent_balance:+,.0f} ‚ÇΩ\n\n"
        response += f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
    finally:
        db.close()


async def categories_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        categories = db.query(Category).filter(
            Category.user_id == db_user.id,
            Category.is_active == True
        ).order_by(Category.transaction_type, Category.name).all()
        
        if not categories:
            await message.answer(
                "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/add_category –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /add_category –ü—Ä–æ–¥—É–∫—Ç—ã —Ä–∞—Å—Ö–æ–¥\n"
                "‚Ä¢ /add_category –ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ—Ö–æ–¥"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
        income_categories = [c for c in categories if c.transaction_type == TransactionType.INCOME]
        expense_categories = [c for c in categories if c.transaction_type == TransactionType.EXPENSE]
        
        response = "üìÇ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        
        if income_categories:
            response += "üí∞ –î–æ—Ö–æ–¥—ã:\n"
            for i, cat in enumerate(income_categories, 1):
                response += f"{i}. {cat.icon or 'üìä'} {cat.name}\n"
            response += "\n"
        
        if expense_categories:
            response += "üí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
            for i, cat in enumerate(expense_categories, 1):
                response += f"{i}. {cat.icon or 'üìä'} {cat.name}\n"
        
        response += "\nüí° –ö–æ–º–∞–Ω–¥—ã:\n"
        response += "‚Ä¢ /add_category –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        response += "‚Ä¢ /edit_category ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        response += "‚Ä¢ /delete_category ID - —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        db.close()


async def add_category_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user = message.from_user
    text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /add_category –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø
    parts = text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer(
            "üìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_category –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /add_category –ü—Ä–æ–¥—É–∫—Ç—ã —Ä–∞—Å—Ö–æ–¥\n"
            "‚Ä¢ /add_category –ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ—Ö–æ–¥\n"
            "‚Ä¢ /add_category –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä–∞—Å—Ö–æ–¥\n\n"
            "–¢–∏–ø—ã: –¥–æ—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥"
        )
        return
    
    name = parts[1].strip()
    category_type = parts[2].lower().strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(name) > 50:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    if category_type not in ['–¥–æ—Ö–æ–¥', '—Ä–∞—Å—Ö–æ–¥']:
        await message.answer("‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–¥–æ—Ö–æ–¥' –∏–ª–∏ '—Ä–∞—Å—Ö–æ–¥'")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_type = TransactionType.INCOME if category_type == '–¥–æ—Ö–æ–¥' else TransactionType.EXPENSE
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        existing = db.query(Category).filter(
            Category.user_id == db_user.id,
            Category.name == name,
            Category.transaction_type == transaction_type,
            Category.is_active == True
        ).first()
        
        if existing:
            await message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = Category(
            user_id=db_user.id,
            name=name,
            transaction_type=transaction_type,
            icon="üìä"  # –ë–∞–∑–æ–≤—ã–π –∑–Ω–∞—á–æ–∫
        )
        
        db.add(category)
        db.commit()
        db.refresh(category)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        type_emoji = "üí∞" if transaction_type == TransactionType.INCOME else "üí∏"
        type_text = "–¥–æ—Ö–æ–¥" if transaction_type == TransactionType.INCOME else "—Ä–∞—Å—Ö–æ–¥"
        
        response = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        response += f"üìÇ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        response += f"üìä –¢–∏–ø: {type_emoji} {type_text}\n"
        response += f"üÜî ID: {category.id}"
        
        await message.answer(response)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name} ({type_text})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        db.rollback()
    finally:
        db.close()


async def delete_category_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user = message.from_user
    text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /delete_category ID
    parts = text.split()
    if len(parts) != 2:
        await message.answer(
            "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_category ID\n"
            "–ü—Ä–∏–º–µ—Ä: /delete_category 123\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /categories"
        )
        return
    
    try:
        category_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = db.query(Category).filter(
            Category.id == category_id,
            Category.user_id == db_user.id,
            Category.is_active == True
        ).first()
        
        if not category:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏–µ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        transactions_count = db.query(Transaction).filter(
            Transaction.category_id == category_id
        ).count()
        
        if transactions_count > 0:
            await message.answer(
                f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.name}'\n\n"
                f"–í –Ω–µ–π –µ—Å—Ç—å {transactions_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–∞
        name = category.name
        transaction_type = category.transaction_type
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        category.is_active = False
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        type_emoji = "üí∞" if transaction_type == TransactionType.INCOME else "üí∏"
        type_text = "–¥–æ—Ö–æ–¥" if transaction_type == TransactionType.INCOME else "—Ä–∞—Å—Ö–æ–¥"
        
        response = f"üóëÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!\n\n"
        response += f"üìÇ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        response += f"üìä –¢–∏–ø: {type_emoji} {type_text}\n"
        response += f"üÜî ID: {category_id}"
        
        await message.answer(response)
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}: {name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        db.rollback()
    finally:
        db.close()


async def notifications_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        from app.services.notifications import NotificationService
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_service = NotificationService(db)
        notifications = notification_service.get_user_notifications(db_user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        response = notification_service.format_notifications(notifications)
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    finally:
        db.close()


async def backup_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = message.from_user
    text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /backup create –∏–ª–∏ /backup list
    parts = text.split()
    if len(parts) < 2:
        await message.answer(
            "üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /backup create - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
            "‚Ä¢ /backup list - —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π\n"
            "‚Ä¢ /backup restore filename - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏\n"
            "‚Ä¢ /backup delete filename - —É–¥–∞–ª–∏—Ç—å –∫–æ–ø–∏—é\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /backup create\n"
            "‚Ä¢ /backup restore backup_user_123_20250820_143022.json"
        )
        return
    
    action = parts[1].lower()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = get_or_create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    db = SessionLocal()
    try:
        from app.services.backup import BackupService
        
        backup_service = BackupService(db)
        
        if action == "create":
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            result = backup_service.create_user_backup(db_user.id)
            
            if result['success']:
                response = f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                response += f"üìÅ –§–∞–π–ª: {result['filename']}\n"
                response += f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['transactions_count']}\n"
                response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {result['categories_count']}\n"
                response += f"üìä –ë—é–¥–∂–µ—Ç–æ–≤: {result['budgets_count']}\n"
                response += f"üîí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {result['alerts_count']}"
            else:
                response = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
            
            await message.answer(response)
            
        elif action == "list":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            backups = backup_service.list_backups(db_user.id)
            
            if not backups:
                await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
                return
            
            response = "üìÅ –í–∞—à–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:\n\n"
            
            for i, backup in enumerate(backups[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                response += f"{i}. {backup['filename']}\n"
                response += f"   üìÖ {backup['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                response += f"   üìè {backup['size'] / 1024:.1f} KB\n\n"
            
            if len(backups) > 5:
                response += f"... –∏ –µ—â–µ {len(backups) - 5} –∫–æ–ø–∏–π\n\n"
            
            response += "üí° –ö–æ–º–∞–Ω–¥—ã:\n"
            response += "‚Ä¢ /backup restore filename - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            response += "‚Ä¢ /backup delete filename - —É–¥–∞–ª–∏—Ç—å"
            
            await message.answer(response)
            
        elif action == "restore":
            if len(parts) < 3:
                await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                return
            
            filename = parts[2]
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            result = backup_service.restore_user_backup(
                os.path.join("backups", filename), 
                db_user.id
            )
            
            if result['success']:
                response = f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {result['categories_restored']}\n"
                response += f"üìä –ë—é–¥–∂–µ—Ç–æ–≤: {result['budgets_restored']}\n"
                response += f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['transactions_restored']}\n"
                response += f"üìà –í—Å–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {result['restored_count']}"
            else:
                response = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
            
            await message.answer(response)
            
        elif action == "delete":
            if len(parts) < 3:
                await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            filename = parts[2]
            
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            result = backup_service.delete_backup(filename)
            
            if result['success']:
                await message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: create, list, restore, delete")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏")
    finally:
        db.close()
